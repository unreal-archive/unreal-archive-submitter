plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
	id 'jacoco'

	alias(libs.plugins.jlink)
	alias(libs.plugins.extra.module.info)
}

group = 'org.unrealarchive'
version = "1.8"
if (System.getenv().containsKey("BUILD_NUMBER")) {
	version += ".${System.env.BUILD_NUMBER}"
} else version += ".DEV"

application {
	mainClassName = 'org.unrealarchive.submitter.Main'
	mainModule = 'unreal.archive.submit'
}

compileJava {
    options.release = 21
}

jlink {
	mergedModuleName = "unreal.archive.submit.merged"
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

	imageName = "${project.name}"
	imageDir = layout.buildDirectory.dir(project.name)

	forceMerge 'slf4j'

	jpackage {
		installerType = project.findProperty('installerType')
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url "https://code.shrimpworks.za.net/artefacts"
		matching {
			group "org.unrealarchive"
			group "net.shrimpworks"
		}
	}
}

def tarBinary = artifacts.add('archives', layout.buildDirectory.file("${project.name}.tgz").get().asFile) {
	type 'tgz'
	builtBy 'jlinkTar'
}

tasks.register('jlinkTar', Tar) {
	dependsOn jlinkZip
	archiveFileName = "${jlink.imageName.get()}.tgz"
	destinationDirectory = layout.buildDirectory
	compression = Compression.GZIP

	into("${jlink.imageName.get()}") {
		from jlink.imageDir
	}
}

publishing {
	repositories {
		maven {
			name = "ShrimpWorks"
			url = 'https://code.shrimpworks.za.net/artefacts/'
			authentication {
				basic(BasicAuthentication)
			}
			credentials(PasswordCredentials) {
				username = "${System.env.ARTEFACTS_USER}"
				password = "${System.env.ARTEFACTS_PASSWORD}"
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from components.java
		}
		mavenLatest(MavenPublication) {
			pom {
				version = "latest"
			}
			artifact tarBinary
		}
	}
}

dependencies {
	implementation(libs.bundles.unreal.archive)

	implementation(libs.bundles.slf4j)
	implementation(libs.undertow.core)
	implementation(libs.jgit)
	implementation(libs.github.api)

	implementation(libs.jackson.databind)

	testImplementation(libs.junit.jupiter)
	testImplementation(libs.mockito.core)
}

extraJavaModuleInfo {
	failOnMissingModuleInfo.set(false)

	module("org.kohsuke:github-api", "org.kohsuke.github.api") {
		requires("java.logging")
		requires("com.fasterxml.jackson.databind")
		requires("org.apache.commons.lang3")
		requires("org.apache.commons.io")
		exports("org.kohsuke.github")
	}

	module("org.eclipse.jgit:org.eclipse.jgit", "org.eclipse.jgit") {
		requires("org.slf4j")
		exports("org.eclipse.jgit.lib")
		exports("org.eclipse.jgit.transport")
		exports("org.eclipse.jgit.api")
		exports("org.eclipse.jgit.api.errors")
	}

	module("org.jboss.xnio:xnio-api", "xnio.api") {
		exports("org.xnio")
	}

	module("io.undertow:undertow-core", "undertow.core") {
		requires("xnio.api")

		exports("io.undertow")
		exports("io.undertow.io")
		exports("io.undertow.server")
		exports("io.undertow.server.handlers.form")
		exports("io.undertow.util")
	}
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
		)
	}
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}
