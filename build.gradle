plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
	id 'jacoco'
}

group = 'net.shrimpworks'
version = "1.5"

mainClassName = 'net.shrimpworks.unreal.archive.submitter.Main'

compileJava {
    options.release = 11
}

if (System.getenv().containsKey("DRONE_BUILD_NUMBER")) {
    version = "${version}.${System.env.DRONE_BUILD_NUMBER}"
}

repositories {
	mavenCentral()
	maven {
		url "https://code.shrimpworks.za.net/artefacts"
	}
}

publishing {
	repositories {
		maven {
			name = "ShrimpWorks"
			url = 'https://code.shrimpworks.za.net/artefacts/'
			authentication {
				basic(BasicAuthentication)
			}
			credentials(PasswordCredentials) {
				username = "${System.env.ARTEFACTS_USER}"
				password = "${System.env.ARTEFACTS_PASSWORD}"
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
}

dependencies {
	implementation 'net.shrimpworks:unreal-archive:1.8.113'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'

	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'org.slf4j:slf4j-simple:1.7.36'

	implementation 'io.undertow:undertow-core:2.2.17.Final'

	implementation 'org.eclipse.jgit:org.eclipse.jgit:6.1.0.202203080745-r'
	implementation 'org.kohsuke:github-api:1.306'

	implementation 'com.timgroup:java-statsd-client:3.1.0'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
		)
	}
}

task execJar(type: Jar) {
	// exclude jar signatures - else it invalidates our fat jar
	exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	archiveClassifier = "exec"
  archiveFileName = "${archiveBaseName.get()}-${archiveClassifier.get()}.${archiveExtension.get()}"
	from sourceSets.main.output

	dependsOn configurations.runtimeClasspath

	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
				'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
		)
	}

	// build the fat executable jar file
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}

	// run the script which builds the executable
	doLast {
		project.exec {
			commandLine(
					"$projectDir/etc/build-launcher.sh",
					"$projectDir/etc/launcher.sh",
					"${destinationDirectory.get()}/${archiveFileName.get()}",
					"${destinationDirectory.get()}/${archiveBaseName.get()}")
		}
	}
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}
